package cn.com.hiss.www.multilib.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.ArrayList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_GET_CHAT_GROUPS".
*/
public class DbGetChatGroupsDao extends AbstractDao<DbGetChatGroups, Long> {

    public static final String TABLENAME = "DB_GET_CHAT_GROUPS";

    /**
     * Properties of entity DbGetChatGroups.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbId = new Property(0, Long.class, "dbId", true, "_id");
        public final static Property LoginUserId = new Property(1, String.class, "loginUserId", false, "LOGIN_USER_ID");
        public final static Property GroupId = new Property(2, String.class, "groupId", false, "GROUP_ID");
        public final static Property GroupName = new Property(3, String.class, "groupName", false, "GROUP_NAME");
        public final static Property Notice = new Property(4, String.class, "notice", false, "NOTICE");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property IsDel = new Property(6, String.class, "isDel", false, "IS_DEL");
        public final static Property CreateTime = new Property(7, String.class, "createTime", false, "CREATE_TIME");
        public final static Property PicUrl = new Property(8, String.class, "picUrl", false, "PIC_URL");
        public final static Property AdminId = new Property(9, String.class, "adminId", false, "ADMIN_ID");
        public final static Property Tags = new Property(10, String.class, "tags", false, "TAGS");
        public final static Property ChatGroupConfig = new Property(11, String.class, "chatGroupConfig", false, "CHAT_GROUP_CONFIG");
    }

    private final TagsConverter tagsConverter = new TagsConverter();
    private final ChatGroupConfigConverter chatGroupConfigConverter = new ChatGroupConfigConverter();

    public DbGetChatGroupsDao(DaoConfig config) {
        super(config);
    }
    
    public DbGetChatGroupsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_GET_CHAT_GROUPS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: dbId
                "\"LOGIN_USER_ID\" TEXT," + // 1: loginUserId
                "\"GROUP_ID\" TEXT," + // 2: groupId
                "\"GROUP_NAME\" TEXT," + // 3: groupName
                "\"NOTICE\" TEXT," + // 4: notice
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"IS_DEL\" TEXT," + // 6: isDel
                "\"CREATE_TIME\" TEXT," + // 7: createTime
                "\"PIC_URL\" TEXT," + // 8: picUrl
                "\"ADMIN_ID\" TEXT," + // 9: adminId
                "\"TAGS\" TEXT," + // 10: tags
                "\"CHAT_GROUP_CONFIG\" TEXT);"); // 11: chatGroupConfig
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_GET_CHAT_GROUPS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbGetChatGroups entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        String loginUserId = entity.getLoginUserId();
        if (loginUserId != null) {
            stmt.bindString(2, loginUserId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(3, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(4, groupName);
        }
 
        String notice = entity.getNotice();
        if (notice != null) {
            stmt.bindString(5, notice);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        String isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindString(7, isDel);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(8, createTime);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(9, picUrl);
        }
 
        String adminId = entity.getAdminId();
        if (adminId != null) {
            stmt.bindString(10, adminId);
        }
 
        ArrayList tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(11, tagsConverter.convertToDatabaseValue(tags));
        }
 
        ChatGroupConfig chatGroupConfig = entity.getChatGroupConfig();
        if (chatGroupConfig != null) {
            stmt.bindString(12, chatGroupConfigConverter.convertToDatabaseValue(chatGroupConfig));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbGetChatGroups entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        String loginUserId = entity.getLoginUserId();
        if (loginUserId != null) {
            stmt.bindString(2, loginUserId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(3, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(4, groupName);
        }
 
        String notice = entity.getNotice();
        if (notice != null) {
            stmt.bindString(5, notice);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        String isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindString(7, isDel);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(8, createTime);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(9, picUrl);
        }
 
        String adminId = entity.getAdminId();
        if (adminId != null) {
            stmt.bindString(10, adminId);
        }
 
        ArrayList tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(11, tagsConverter.convertToDatabaseValue(tags));
        }
 
        ChatGroupConfig chatGroupConfig = entity.getChatGroupConfig();
        if (chatGroupConfig != null) {
            stmt.bindString(12, chatGroupConfigConverter.convertToDatabaseValue(chatGroupConfig));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbGetChatGroups readEntity(Cursor cursor, int offset) {
        DbGetChatGroups entity = new DbGetChatGroups( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // loginUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // notice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // isDel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // picUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // adminId
            cursor.isNull(offset + 10) ? null : tagsConverter.convertToEntityProperty(cursor.getString(offset + 10)), // tags
            cursor.isNull(offset + 11) ? null : chatGroupConfigConverter.convertToEntityProperty(cursor.getString(offset + 11)) // chatGroupConfig
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbGetChatGroups entity, int offset) {
        entity.setDbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLoginUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNotice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsDel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPicUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAdminId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTags(cursor.isNull(offset + 10) ? null : tagsConverter.convertToEntityProperty(cursor.getString(offset + 10)));
        entity.setChatGroupConfig(cursor.isNull(offset + 11) ? null : chatGroupConfigConverter.convertToEntityProperty(cursor.getString(offset + 11)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbGetChatGroups entity, long rowId) {
        entity.setDbId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbGetChatGroups entity) {
        if(entity != null) {
            return entity.getDbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbGetChatGroups entity) {
        return entity.getDbId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
