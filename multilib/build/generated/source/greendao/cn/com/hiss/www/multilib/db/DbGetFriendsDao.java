package cn.com.hiss.www.multilib.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_GET_FRIENDS".
*/
public class DbGetFriendsDao extends AbstractDao<DbGetFriends, Long> {

    public static final String TABLENAME = "DB_GET_FRIENDS";

    /**
     * Properties of entity DbGetFriends.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbId = new Property(0, Long.class, "dbId", true, "_id");
        public final static Property LoginUserId = new Property(1, String.class, "loginUserId", false, "LOGIN_USER_ID");
        public final static Property CheckFlag = new Property(2, boolean.class, "checkFlag", false, "CHECK_FLAG");
        public final static Property FriendId = new Property(3, String.class, "friendId", false, "FRIEND_ID");
        public final static Property RealName = new Property(4, String.class, "realName", false, "REAL_NAME");
        public final static Property FriendRemark = new Property(5, String.class, "friendRemark", false, "FRIEND_REMARK");
        public final static Property UniversityName = new Property(6, String.class, "universityName", false, "UNIVERSITY_NAME");
        public final static Property Sex = new Property(7, String.class, "sex", false, "SEX");
        public final static Property Age = new Property(8, String.class, "age", false, "AGE");
        public final static Property ClassName = new Property(9, String.class, "className", false, "CLASS_NAME");
        public final static Property ImgUrl = new Property(10, String.class, "imgUrl", false, "IMG_URL");
        public final static Property FirstLetter = new Property(11, String.class, "firstLetter", false, "FIRST_LETTER");
    }


    public DbGetFriendsDao(DaoConfig config) {
        super(config);
    }
    
    public DbGetFriendsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_GET_FRIENDS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: dbId
                "\"LOGIN_USER_ID\" TEXT," + // 1: loginUserId
                "\"CHECK_FLAG\" INTEGER NOT NULL ," + // 2: checkFlag
                "\"FRIEND_ID\" TEXT," + // 3: friendId
                "\"REAL_NAME\" TEXT," + // 4: realName
                "\"FRIEND_REMARK\" TEXT," + // 5: friendRemark
                "\"UNIVERSITY_NAME\" TEXT," + // 6: universityName
                "\"SEX\" TEXT," + // 7: sex
                "\"AGE\" TEXT," + // 8: age
                "\"CLASS_NAME\" TEXT," + // 9: className
                "\"IMG_URL\" TEXT," + // 10: imgUrl
                "\"FIRST_LETTER\" TEXT);"); // 11: firstLetter
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_GET_FRIENDS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbGetFriends entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        String loginUserId = entity.getLoginUserId();
        if (loginUserId != null) {
            stmt.bindString(2, loginUserId);
        }
        stmt.bindLong(3, entity.getCheckFlag() ? 1L: 0L);
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(4, friendId);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(5, realName);
        }
 
        String friendRemark = entity.getFriendRemark();
        if (friendRemark != null) {
            stmt.bindString(6, friendRemark);
        }
 
        String universityName = entity.getUniversityName();
        if (universityName != null) {
            stmt.bindString(7, universityName);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(9, age);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(10, className);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(11, imgUrl);
        }
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(12, firstLetter);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbGetFriends entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        String loginUserId = entity.getLoginUserId();
        if (loginUserId != null) {
            stmt.bindString(2, loginUserId);
        }
        stmt.bindLong(3, entity.getCheckFlag() ? 1L: 0L);
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(4, friendId);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(5, realName);
        }
 
        String friendRemark = entity.getFriendRemark();
        if (friendRemark != null) {
            stmt.bindString(6, friendRemark);
        }
 
        String universityName = entity.getUniversityName();
        if (universityName != null) {
            stmt.bindString(7, universityName);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(9, age);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(10, className);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(11, imgUrl);
        }
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(12, firstLetter);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbGetFriends readEntity(Cursor cursor, int offset) {
        DbGetFriends entity = new DbGetFriends( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // loginUserId
            cursor.getShort(offset + 2) != 0, // checkFlag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // friendId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // realName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // friendRemark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // universityName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // age
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // className
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // imgUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // firstLetter
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbGetFriends entity, int offset) {
        entity.setDbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLoginUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCheckFlag(cursor.getShort(offset + 2) != 0);
        entity.setFriendId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRealName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFriendRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUniversityName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAge(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setClassName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImgUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFirstLetter(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbGetFriends entity, long rowId) {
        entity.setDbId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbGetFriends entity) {
        if(entity != null) {
            return entity.getDbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbGetFriends entity) {
        return entity.getDbId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
