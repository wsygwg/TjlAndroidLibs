package cn.com.hiss.www.multilib.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_RECENTLY_USER".
*/
public class DbRecentlyUserDao extends AbstractDao<DbRecentlyUser, Long> {

    public static final String TABLENAME = "DB_RECENTLY_USER";

    /**
     * Properties of entity DbRecentlyUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbId = new Property(0, Long.class, "dbId", true, "_id");
        public final static Property LoginUserId = new Property(1, String.class, "loginUserId", false, "LOGIN_USER_ID");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property UnreadCount = new Property(4, String.class, "unreadCount", false, "UNREAD_COUNT");
        public final static Property IsFriend = new Property(5, String.class, "isFriend", false, "IS_FRIEND");
        public final static Property RecentTime = new Property(6, long.class, "recentTime", false, "RECENT_TIME");
        public final static Property ContentType = new Property(7, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property ContentData = new Property(8, String.class, "contentData", false, "CONTENT_DATA");
        public final static Property DbGetStudentStr = new Property(9, String.class, "dbGetStudentStr", false, "DB_GET_STUDENT_STR");
        public final static Property DbGetChatGroupsStr = new Property(10, String.class, "dbGetChatGroupsStr", false, "DB_GET_CHAT_GROUPS_STR");
        public final static Property TopFlag = new Property(11, boolean.class, "topFlag", false, "TOP_FLAG");
    }


    public DbRecentlyUserDao(DaoConfig config) {
        super(config);
    }
    
    public DbRecentlyUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_RECENTLY_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: dbId
                "\"LOGIN_USER_ID\" TEXT," + // 1: loginUserId
                "\"ID\" TEXT," + // 2: id
                "\"TYPE\" TEXT," + // 3: type
                "\"UNREAD_COUNT\" TEXT," + // 4: unreadCount
                "\"IS_FRIEND\" TEXT," + // 5: isFriend
                "\"RECENT_TIME\" INTEGER NOT NULL ," + // 6: recentTime
                "\"CONTENT_TYPE\" TEXT," + // 7: contentType
                "\"CONTENT_DATA\" TEXT," + // 8: contentData
                "\"DB_GET_STUDENT_STR\" TEXT," + // 9: dbGetStudentStr
                "\"DB_GET_CHAT_GROUPS_STR\" TEXT," + // 10: dbGetChatGroupsStr
                "\"TOP_FLAG\" INTEGER NOT NULL );"); // 11: topFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_RECENTLY_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbRecentlyUser entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        String loginUserId = entity.getLoginUserId();
        if (loginUserId != null) {
            stmt.bindString(2, loginUserId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String unreadCount = entity.getUnreadCount();
        if (unreadCount != null) {
            stmt.bindString(5, unreadCount);
        }
 
        String isFriend = entity.getIsFriend();
        if (isFriend != null) {
            stmt.bindString(6, isFriend);
        }
        stmt.bindLong(7, entity.getRecentTime());
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(8, contentType);
        }
 
        String contentData = entity.getContentData();
        if (contentData != null) {
            stmt.bindString(9, contentData);
        }
 
        String dbGetStudentStr = entity.getDbGetStudentStr();
        if (dbGetStudentStr != null) {
            stmt.bindString(10, dbGetStudentStr);
        }
 
        String dbGetChatGroupsStr = entity.getDbGetChatGroupsStr();
        if (dbGetChatGroupsStr != null) {
            stmt.bindString(11, dbGetChatGroupsStr);
        }
        stmt.bindLong(12, entity.getTopFlag() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbRecentlyUser entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        String loginUserId = entity.getLoginUserId();
        if (loginUserId != null) {
            stmt.bindString(2, loginUserId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String unreadCount = entity.getUnreadCount();
        if (unreadCount != null) {
            stmt.bindString(5, unreadCount);
        }
 
        String isFriend = entity.getIsFriend();
        if (isFriend != null) {
            stmt.bindString(6, isFriend);
        }
        stmt.bindLong(7, entity.getRecentTime());
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(8, contentType);
        }
 
        String contentData = entity.getContentData();
        if (contentData != null) {
            stmt.bindString(9, contentData);
        }
 
        String dbGetStudentStr = entity.getDbGetStudentStr();
        if (dbGetStudentStr != null) {
            stmt.bindString(10, dbGetStudentStr);
        }
 
        String dbGetChatGroupsStr = entity.getDbGetChatGroupsStr();
        if (dbGetChatGroupsStr != null) {
            stmt.bindString(11, dbGetChatGroupsStr);
        }
        stmt.bindLong(12, entity.getTopFlag() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbRecentlyUser readEntity(Cursor cursor, int offset) {
        DbRecentlyUser entity = new DbRecentlyUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // loginUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // unreadCount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // isFriend
            cursor.getLong(offset + 6), // recentTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // contentType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // contentData
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dbGetStudentStr
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dbGetChatGroupsStr
            cursor.getShort(offset + 11) != 0 // topFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbRecentlyUser entity, int offset) {
        entity.setDbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLoginUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnreadCount(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsFriend(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRecentTime(cursor.getLong(offset + 6));
        entity.setContentType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContentData(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDbGetStudentStr(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDbGetChatGroupsStr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTopFlag(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbRecentlyUser entity, long rowId) {
        entity.setDbId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbRecentlyUser entity) {
        if(entity != null) {
            return entity.getDbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbRecentlyUser entity) {
        return entity.getDbId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
