package cn.com.hiss.www.multilib.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_FRIEND_REQUEST_MODEL".
*/
public class DbFriendRequestModelDao extends AbstractDao<DbFriendRequestModel, Long> {

    public static final String TABLENAME = "DB_FRIEND_REQUEST_MODEL";

    /**
     * Properties of entity DbFriendRequestModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbId = new Property(0, Long.class, "dbId", true, "_id");
        public final static Property LoginUserId = new Property(1, String.class, "loginUserId", false, "LOGIN_USER_ID");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property ApproveMessage = new Property(3, String.class, "approveMessage", false, "APPROVE_MESSAGE");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Accepted = new Property(5, String.class, "accepted", false, "ACCEPTED");
        public final static Property GroupId = new Property(6, String.class, "GroupId", false, "GROUP_ID");
        public final static Property GroupApplyPersonId = new Property(7, String.class, "groupApplyPersonId", false, "GROUP_APPLY_PERSON_ID");
        public final static Property RequestTime = new Property(8, long.class, "requestTime", false, "REQUEST_TIME");
        public final static Property DbFriendStr = new Property(9, String.class, "dbFriendStr", false, "DB_FRIEND_STR");
        public final static Property DbGroupStr = new Property(10, String.class, "dbGroupStr", false, "DB_GROUP_STR");
    }


    public DbFriendRequestModelDao(DaoConfig config) {
        super(config);
    }
    
    public DbFriendRequestModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_FRIEND_REQUEST_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: dbId
                "\"LOGIN_USER_ID\" TEXT," + // 1: loginUserId
                "\"ID\" TEXT," + // 2: id
                "\"APPROVE_MESSAGE\" TEXT," + // 3: approveMessage
                "\"TYPE\" TEXT," + // 4: type
                "\"ACCEPTED\" TEXT," + // 5: accepted
                "\"GROUP_ID\" TEXT," + // 6: GroupId
                "\"GROUP_APPLY_PERSON_ID\" TEXT," + // 7: groupApplyPersonId
                "\"REQUEST_TIME\" INTEGER NOT NULL ," + // 8: requestTime
                "\"DB_FRIEND_STR\" TEXT," + // 9: dbFriendStr
                "\"DB_GROUP_STR\" TEXT);"); // 10: dbGroupStr
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_FRIEND_REQUEST_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbFriendRequestModel entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        String loginUserId = entity.getLoginUserId();
        if (loginUserId != null) {
            stmt.bindString(2, loginUserId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String approveMessage = entity.getApproveMessage();
        if (approveMessage != null) {
            stmt.bindString(4, approveMessage);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String accepted = entity.getAccepted();
        if (accepted != null) {
            stmt.bindString(6, accepted);
        }
 
        String GroupId = entity.getGroupId();
        if (GroupId != null) {
            stmt.bindString(7, GroupId);
        }
 
        String groupApplyPersonId = entity.getGroupApplyPersonId();
        if (groupApplyPersonId != null) {
            stmt.bindString(8, groupApplyPersonId);
        }
        stmt.bindLong(9, entity.getRequestTime());
 
        String dbFriendStr = entity.getDbFriendStr();
        if (dbFriendStr != null) {
            stmt.bindString(10, dbFriendStr);
        }
 
        String dbGroupStr = entity.getDbGroupStr();
        if (dbGroupStr != null) {
            stmt.bindString(11, dbGroupStr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbFriendRequestModel entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        String loginUserId = entity.getLoginUserId();
        if (loginUserId != null) {
            stmt.bindString(2, loginUserId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String approveMessage = entity.getApproveMessage();
        if (approveMessage != null) {
            stmt.bindString(4, approveMessage);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String accepted = entity.getAccepted();
        if (accepted != null) {
            stmt.bindString(6, accepted);
        }
 
        String GroupId = entity.getGroupId();
        if (GroupId != null) {
            stmt.bindString(7, GroupId);
        }
 
        String groupApplyPersonId = entity.getGroupApplyPersonId();
        if (groupApplyPersonId != null) {
            stmt.bindString(8, groupApplyPersonId);
        }
        stmt.bindLong(9, entity.getRequestTime());
 
        String dbFriendStr = entity.getDbFriendStr();
        if (dbFriendStr != null) {
            stmt.bindString(10, dbFriendStr);
        }
 
        String dbGroupStr = entity.getDbGroupStr();
        if (dbGroupStr != null) {
            stmt.bindString(11, dbGroupStr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbFriendRequestModel readEntity(Cursor cursor, int offset) {
        DbFriendRequestModel entity = new DbFriendRequestModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // loginUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // approveMessage
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // accepted
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // GroupId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // groupApplyPersonId
            cursor.getLong(offset + 8), // requestTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dbFriendStr
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // dbGroupStr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbFriendRequestModel entity, int offset) {
        entity.setDbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLoginUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApproveMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAccepted(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroupId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroupApplyPersonId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRequestTime(cursor.getLong(offset + 8));
        entity.setDbFriendStr(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDbGroupStr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbFriendRequestModel entity, long rowId) {
        entity.setDbId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbFriendRequestModel entity) {
        if(entity != null) {
            return entity.getDbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbFriendRequestModel entity) {
        return entity.getDbId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
